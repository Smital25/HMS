from flask import Flask, render_template, request, jsonify,session
from pymongo import MongoClient
from flask_cors import CORS
from bson.objectid import ObjectId
from flask import Flask, render_template, url_for, redirect
from flask_mail import Mail
import os


app = Flask(__name__, template_folder="templates")  # Ensure Flask finds HTML files
CORS(app)

# MongoDB Configuration
client = MongoClient("mongodb://localhost:27017/")
db = client["user_db"]
rooms_collection = db["rooms"]
allocations_collection = db["roomallocation"]
notifications_collection = db["notifications"]

### **Frontend Routes (Render HTML Pages)** ###
@app.route('/')
def homepage():
    return render_template("homepage.html")
app.secret_key = 'your_secret_key'

# Dummy users (replace with MongoDB or SQL later)
users = {
    "admin": {"password": "adminpass", "role": "admin"},
    "student": {"password": "studentpass", "role": "student"}
}

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        role = request.form['role']
        
        user = users.get(username)
        if user and user['password'] == password and user['role'] == role:
            session['username'] = username
            session['role'] = role
            if role == 'admin':
                return redirect('/admin_dashboard')
            elif role == 'student':
                return redirect('/student_dashboard')
        else:
            return "Invalid credentials! Try again."
    return render_template('login.html')

@app.route('/signup')
def register():
     return render_template('signup.html')

@app.route('/student_dashboard')
def student_dashboard():
    return render_template('student_dashboard.html')

@app.route('/admin_dashboard')
def admin_dashboard():
    return render_template('admin_dashboard.html')

@app.route('/notification')
def notification():
    return render_template('notification.html')

@app.route('/main')
def main_dashboard():
    return render_template("main.html")

@app.route('/allocate')
def allocate():
    return render_template("allocate.html")

@app.route('/view')
def view_rooms():
    return render_template("view.html")

@app.route('/swap')
def swap_rooms():
    return render_template("swap.html")

@app.route('/manage')
def manage_rooms():
    return render_template("managerooms.html")

# ‚úÖ Logout Route (Redirects to Homepage)
@app.route('/logout')
def logout():
    return redirect(url_for('homepage'))

# @app.route('/notifications')
# def notifications():
#     return render_template("notification.html")

### **Backend API Routes** ###
# Route to Add a Room
@app.route("/add_room", methods=["POST"])
def add_room():
    data = request.json
    gender = data.get("gender")
    hostel = data.get("hostel")
    room_number = data.get("roomNumber")
    room_type = data.get("roomType")

    if not gender or not hostel or not room_number or not room_type:
        return jsonify({"error": "Missing details"}), 400

    if rooms_collection.find_one({"roomNumber": room_number, "hostel": hostel}):
        return jsonify({"error": "Room already exists in this hostel!"}), 409

    rooms_collection.insert_one({"gender": gender, "hostel": hostel, "roomNumber": room_number, "roomType": room_type})
    return jsonify({"message": f"Room {room_number} added successfully in {hostel}!"}), 201

# Route to Delete a Room
@app.route("/delete_room", methods=["DELETE"])
def delete_room():
    data = request.json
    room_number = data.get("roomNumber")

    if not room_number:
        return jsonify({"error": "Missing room number"}), 400

    result = rooms_collection.delete_one({"roomNumber": room_number})
    if result.deleted_count == 0:
        return jsonify({"error": "Room not found"}), 404

    return jsonify({"message": f"Room {room_number} deleted successfully!"}), 200

# Route to Allocate a Room and Store in MongoDB
@app.route('/allocate_room', methods=['POST'])
def allocate_room():
    data = request.json
    if not all(key in data for key in ["studentName", "usn", "roomType", "roomId"]):
        return jsonify({"error": "Missing fields"}), 400

    allocation = {
        "studentName": data["studentName"],
        "usn": data["usn"],
        "roomType": data["roomType"],
        "roomId": data["roomId"]
    }

    allocations_collection.insert_one(allocation)  # Store in MongoDB
    return jsonify({"message": f"Room {data['roomId']} allocated successfully for {data['studentName']}"}), 201

### **Backend API Routes**
# ‚úÖ Post Notification API
@app.route('/post_notification', methods=['POST'])
def post_notification():
    data = request.json
    notification_text = data.get("notification")

    if not notification_text:
        return jsonify({"error": "Notification text is required"}), 400

    new_notification = notifications_collection.insert_one({"message": notification_text})
    return jsonify({"message": "Notification posted successfully!", "id": str(new_notification.inserted_id)}), 201

# ‚úÖ Fetch Notifications API
@app.route('/get_notifications', methods=['GET'])
def get_notifications():
    notifications = list(notifications_collection.find({}, {"_id": 1, "message": 1}))
    return jsonify([{"id": str(n["_id"]), "message": n["message"]} for n in notifications])

# ‚úÖ Delete Notification API
@app.route('/delete_notification', methods=['DELETE'])
def delete_notification():
    data = request.json
    notification_id = data.get("id")

    if not notification_id:
        print("‚ùå No notification ID received.")  # Debugging Log
        return jsonify({"error": "Notification ID is required"}), 400

    try:
        print(f"üîπ Received ID to delete: {notification_id}")  # Debugging Log

        # ‚úÖ Convert ID to ObjectId format
        if not ObjectId.is_valid(notification_id):
            print("‚ùå Invalid ObjectId format.")
            return jsonify({"error": "Invalid notification ID format"}), 400

        result = notifications_collection.delete_one({"_id": ObjectId(notification_id)})

        if result.deleted_count == 0:
            print("‚ùå Notification not found in MongoDB")
            return jsonify({"error": "Notification not found"}), 404

        print("‚úÖ Notification deleted successfully")
        return jsonify({"message": "Notification deleted successfully"}), 200
    except Exception as e:
        print(f"‚ùå Error: {e}")  # Debugging Log
        return jsonify({"error": "Invalid notification ID"}), 400

users_collection = db["users"]  # Correct collection name
leave_requests_collection = db["leave_requests"]  # Correct collection name

app.secret_key = "your_secret_key"

# Flask-Mail configuration
app.config['MAIL_SERVER'] = 'smtp.gmail.com'  # Example SMTP server, use your provider
app.config['MAIL_PORT'] = 587
app.config['MAIL_USE_TLS'] = True
app.config['MAIL_USERNAME'] = 'shostelmanagement@gmail.com'  # Replace with your email
app.config['MAIL_PASSWORD'] = 'System@123'  # Replace with your email password
app.config['MAIL_DEFAULT_SENDER'] = 'shostelmanagement@gmail.com'

mail = Mail(app)

# Ensure the static folder exists
if not os.path.exists('static'):
    os.makedirs('static')

# Registration Route
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        student_id = request.form['student_id']
        name = request.form['name']
        contact_number = request.form['contact_number']
        age = request.form['age']
        gender = request.form['gender']
        email = request.form['email']
        dob = request.form['dob']
        address = request.form['address']
        username = request.form['username']
        password = request.form['password']

        hashed_password = generate_password_hash(password)

        users_collection.insert_one({
            'student_id': student_id,
            'name': name,
            'contact_number': contact_number,
            'age': age,
            'gender': gender,
            'email': email,
            'dob': dob,
            'address': address,
            'username': username,
            'password': hashed_password
        })

        flash("Registration successful! Please login.")
        return redirect(url_for('login'))

    return render_template('register.html')

# Login Route
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        role = request.form.get('role')

        if role == 'admin':
            # Check admin credentials (replace with a secure database query)
            if username == 'admin' and password == 'admin123':  # Example credentials
                session['role'] = 'admin'
                session['username'] = username
                return redirect(url_for('admin_dashboard'))
            else:
                flash('Invalid admin credentials!')
                return redirect(url_for('login'))
        
        elif role == 'student':
            # Check student credentials in the database
            student = users_collection.find_one({'username': username})
            if student and check_password_hash(student['password'], password):  # Use check_password_hash
                session['role'] = 'student'
                session['username'] = username
                return redirect(url_for('student_dashboard'))  # Replace with the student dashboard route
            else:
                flash('Invalid student credentials!')
                return redirect(url_for('login'))
        
        else:
            flash('Please select a valid role.')
            return redirect(url_for('login'))

    return render_template('login.html')

# Admin Dashboard Route
@app.route('/admin/dashboard')
def admin_dashboard():
    if 'role' not in session or session['role'] != 'admin':
        return redirect(url_for('login'))
    
    # Fetch all student data and leave requests
    students = list(users_collection.find({}))
    leave_requests = list(leave_requests_collection.find({}))

    # Debugging: print the leave requests data to see if it includes student_name
    print(leave_requests)

    return render_template('admin_dashboard.html', students=students, leave_requests=leave_requests)


# Logout Route
@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('login'))

# Student Dashboard Route
@app.route('/student-dashboard')
def student_dashboard():
    if 'role' not in session or session['role'] != 'student':
        return redirect(url_for('login'))

    student = users_collection.find_one({'username': session['username']})
    if not student:
        flash("Student not found!")
        return redirect(url_for('login'))

    leave_requests = list(leave_requests_collection.find({'student_id': student['student_id']}))
    leave_count = len(leave_requests)

    return render_template('student_dashboard.html', 
                           student=student, 
                           leave_requests=leave_requests, 
                           leave_count=leave_count)

# Leave Request Form Route
@app.route('/leave_request', methods=['GET', 'POST'])
def leave_request():
    if 'role' not in session or session['role'] != 'student':
        return redirect(url_for('login'))

    student = users_collection.find_one({'username': session['username']})
    if not student:
        flash("Student not found!")
        return redirect(url_for('login'))

    if request.method == 'POST':
        student_id = request.form.get('student_id')
        room_id = request.form.get('room_id')
        start_date = request.form.get('start_date')
        end_date = request.form.get('end_date')
        reason = request.form.get('reason')

        # Fetch student's name
        student_name = student['name']

        # Debug: Print the form data
        print(f"Received data: student_id={student_id}, room_id={room_id}, start_date={start_date}, end_date={end_date}, reason={reason}, student_name={student_name}")

        if not all([student_id, room_id, start_date, end_date, reason]):
            flash("All fields are required!")
            return redirect(url_for('leave_request'))

        # Generate PDF filename
        pdf_filename = f"leave_request_{student_id}_{room_id}.pdf"
        pdf_path = os.path.join('static', pdf_filename)
        generate_leave_pdf(student_id, room_id, start_date, end_date, reason, pdf_path)

        # Insert the leave request into MongoDB with student name
        leave_requests_collection.insert_one({
            'student_id': student_id,
            'room_id': room_id,
            'start_date': start_date,
            'end_date': end_date,
            'reason': reason,
            'student_name': student_name,  # Added student name
            'pdf_filename': pdf_filename,
            'status': 'pending'  # Default status is pending
        })

        # Send email to admin
        send_leave_request_email(student_id, student_name, student['email'], pdf_path)

        flash("Leave request submitted successfully and email sent to admin!")
        return redirect(url_for('student_dashboard'))

    return render_template('leave_request.html', student_id=student['student_id'])


# Generate Leave Request PDF
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

def generate_leave_pdf(student_id, room_id, start_date, end_date, reason, pdf_path):
    try:
        c = canvas.Canvas(pdf_path, pagesize=letter)
        width, height = letter

        # Title of the letter
        c.setFont("Helvetica", 12)
        c.drawString(100, height - 100, "Leave Request Letter")
        c.line(100, height - 110, 500, height - 110)

        # Letter content
        c.drawString(100, height - 140, f"Student ID: {student_id}")
        c.drawString(100, height - 160, f"Room ID: {room_id}")
        c.drawString(100, height - 180, f"Leave Period: {start_date} to {end_date}")
        c.drawString(100, height - 200, f"Reason for Leave: {reason}")
        
        # Formal tone
        c.drawString(100, height - 220, "Dear Sir/Madam,")
        c.drawString(100, height - 240, "I am a student from SDMCET,")
        c.drawString(100, height - 260, "asking you to please grant me leave for the following days.")
        c.drawString(100, height - 280, "I hope you will approve this leave request.")
        c.drawString(100, height - 300, "Thank you for your consideration.")
        
        # Sign off
        c.drawString(100, height - 320, "Sincerely,")
        c.drawString(100, height - 340, f"Student ID: {student_id}")

        # Save the PDF
        c.save()

    except Exception as e:
        print(f"Error generating PDF: {e}")


#send_leave_request
@app.route('/send_leave_request', methods=['GET', 'POST'])
def send_leave_request():
    if 'role' not in session or session['role'] != 'student':
        return redirect(url_for('login'))

    student = users_collection.find_one({'username': session['username']})
    if not student:
        flash("Student not found!")
        return redirect(url_for('login'))

    if request.method == 'POST':
        pdf_file = request.files['pdf_file']
        if pdf_file and pdf_file.filename.endswith('.pdf'):
            pdf_path = os.path.join('static', pdf_file.filename)
            pdf_file.save(pdf_path)

            # Optionally send the PDF to the admin or update MongoDB
            flash("Leave request sent successfully!")
        else:
            flash("Invalid file format. Please upload a PDF.")

    return render_template('send_leave_request.html', student=student)


# Send email with attachment
def send_leave_request_email(student_id, name, email, pdf_path):
    try:
        from_email = "shostelmanagement@gmail.com"
        from_password = "System@123"
        to_email = "admin_email@example.com"

        subject = f"Leave Request from {name} (Student ID: {student_id})"
        body = f"Dear Admin,\n\n{name} (Student ID: {student_id}) has submitted a leave request. Please find the attached PDF.\n\nThank you."

        # Set up email
        msg = MIMEMultipart()
        msg['From'] = from_email
        msg['To'] = to_email
        msg['Subject'] = subject
        msg.attach(MIMEText(body, 'plain'))

        # Attach PDF
        from email.mime.application import MIMEApplication

        with open(pdf_path, "rb") as attachment:
            part = MIMEApplication(attachment.read(), _subtype="pdf")
            part.add_header('Content-Disposition', 'attachment', filename=os.path.basename(pdf_path))
            msg.attach(part)

        # Send email
        import smtplib
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(from_email, from_password)
        server.send_message(msg)
        server.quit()
        print("Email sent successfully.")

    except Exception as e:
        print(f"Error sending email: {e}")

# Admin approval/rejection routes
from bson.objectid import ObjectId
from bson.errors import InvalidId

@app.route('/admin/approve_leave_request/<leave_id>', methods=['GET'])
def approve_leave_request(leave_id):
    if 'role' not in session or session['role'] != 'admin':
        return redirect(url_for('login'))
    
    try:
        leave_request = leave_requests_collection.find_one({'_id': ObjectId(leave_id)})
        if leave_request:
            leave_requests_collection.update_one({'_id': ObjectId(leave_id)}, {'$set': {'status': 'approved'}})
            flash("Leave request approved!")
        else:
            flash("Leave request not found.")
    except InvalidId:
        flash("Invalid leave request ID.")
    
    return redirect(url_for('admin_dashboard'))

@app.route('/admin/reject_leave_request/<leave_id>', methods=['GET'])
def reject_leave_request(leave_id):
    if 'role' not in session or session['role'] != 'admin':
        return redirect(url_for('login'))
    
    try:
        leave_request = leave_requests_collection.find_one({'_id': ObjectId(leave_id)})
        if leave_request:
            leave_requests_collection.update_one({'_id': ObjectId(leave_id)}, {'$set': {'status': 'rejected'}})
            flash("Leave request rejected.")
        else:
            flash("Leave request not found.")
    except InvalidId:
        flash("Invalid leave request ID.")
    
    return redirect(url_for('admin_dashboard'))


# Serve Static Files for PDFs
@app.route('/static/<filename>')
def serve_file(filename):
    return send_from_directory('static', filename)

from flask import Flask, render_template, request, redirect, url_for, session, flash
from flask_mail import Mail, Message
from werkzeug.security import generate_password_hash, check_password_hash
from pymongo import MongoClient
import secrets

# Forgot Password Route
@app.route('/forgot_password', methods=['GET', 'POST'])
def forgot_password():
    if request.method == 'POST':
        email = request.form.get('email')
        user = users_collection.find_one({'email': email})
        if user:
            token = secrets.token_urlsafe(16)
            users_collection.update_one({'email': email}, {'$set': {'reset_token': token}})
            reset_link = url_for('reset_password', token=token, _external=True)
            
            msg = Message("Password Reset Request", recipients=[email])
            msg.body = f"Click the link to reset your password: {reset_link}"
            mail.send(msg)
            flash("A password reset link has been sent to your email.")
        else:
            flash("Email not found.")
    return render_template('forgot_password.html', title="Forgot Password")

# Reset Password Route
@app.route('/reset_password/<token>', methods=['GET', 'POST'])
def reset_password(token):
    user = users_collection.find_one({'reset_token': token})
    if not user:
        flash("Invalid or expired token.")
        return redirect(url_for('forgot_password'))
    
    if request.method == 'POST':
        new_password = request.form.get('new_password')
        hashed_password = generate_password_hash(new_password)
        users_collection.update_one({'reset_token': token}, {'$set': {'password': hashed_password}, '$unset': {'reset_token': ""}})
        flash("Password reset successfully! Please log in.")
        return redirect(url_for('login'))
    
    return render_template('reset_password.html', title="Reset Password")

if __name__ == "__main__":
    app.run(debug=True)